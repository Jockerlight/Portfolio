import:
	com.comphenix.protocol.ProtocolLib
	com.comphenix.protocol.ProtocolLibrary
	com.comphenix.protocol.injector.PacketConstructor
	com.comphenix.protocol.PacketType
	com.comphenix.protocol.wrappers.BlockPosition
	org.bukkit.event.block.BlockDamageAbortEvent
	com.comphenix.protocol.ProtocolManager
	java.util.Random
	java.lang.Integer
	org.bukkit.Effect

on load:
	set {-protocolManager} to ProtocolLibrary.getProtocolManager()


function getProtocolManager() :: object:
	return {-protocolManager}
	
function packets_blockBreakAnimation(players: players, loc: location, stage: number, id: number):
	if {_id} is not set:
		set {_i} to new Random().nextInt(2100000)
	else:
		set {_i} to Integer.parseInt("%{_id}%")
	set {_pos} to new BlockPosition({_loc}.getBlockX(), {_loc}.getBlockY(), {_loc}.getBlockZ())
	set {_packet} to getProtocolManager().createPacket(PacketType.Play.Server.BLOCK_BREAK_ANIMATION)
	{_packet}.getBlockPositionModifier().write(0, {_pos})
	{_packet}.getIntegers().write(0, {_i}) 
	if {_stage} <= 10:
		{_packet}.getIntegers().write(1, Integer.parseInt("%{_stage}%")) 
		loop {_players::*}:
			getProtocolManager().sendServerPacket(loop-value, {_packet})
	
	
	
on BlockDamageAbortEvent:
	delete metadata tag "verify" of event.getPlayer()

on block damage:
	set metadata tag "verify" of player to event-block
	set {_compound} to nbt compound of player's tool
	set metadata value "miningPower" of player to {_power} ? 0
    
    
on arm swing:
	player's gamemode = survival
	stop if distance between player and player's target block > 5
	metadata tag "verify" of player is player's target block
	if target block of player is stone:
		set {_loc} to location of target block
		set {_compound} to nbt compound of target block
		mining(player,{_loc},{_compound})


function breakBlockAnimation(loc: location):
	set {_m} to (type of block at {_loc}).getMaterial()
	{_loc}.getWorld().playEffect({_loc}, Effect.STEP_SOUND, {_m}, 10)	
