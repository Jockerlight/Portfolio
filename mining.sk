import:
	net.minecraft.network.protocol.game.PacketPlayOutBlockBreakAnimation 
	net.minecraft.core.BlockPosition
	java.util.Random
	it.unimi.dsi.fastutil.ints.IntArrayList
	java.lang.Integer


function createMiningState(id: number, location: location, stage: number, players: players):
	if {_id} is not set:
		set {_id} to new Random().nextInt(2100000)
	else:
		set {_i} to Integer.parseInt("%{_id}%")
	set {_blockposition} to new BlockPosition({_location}.getBlockX(), {_location}.getBlockY(), {_location}.getBlockZ())
	set {_packet} to new PacketPlayOutBlockBreakAnimation({_id}, {_blockposition}, Integer.parseInt("%{_stage}%"))
	loop {_players::*}:
		loop-value.getHandle().b.a({_packet})
	
	
	
on BlockDamageAbortEvent:
	delete metadata tag "verify" of event.getPlayer()

on block damage:
	set metadata tag "verify" of player to event-block
	set {_compound} to nbt compound of player's tool
	set metadata value "miningPower" of player to {_power} ? 0
    
    
on arm swing:
	player's gamemode = survival
	stop if distance between player and player's target block > 5
	metadata tag "verify" of player is player's target block
	if target block of player is stone:
		player.addPotionEffect(new PotionEffect(PotionEffectType.SLOW_DIGGING, 2, -1, true, false, false))
		set {_loc} to location of target block
		set {_compound} to nbt compound of target block
		mining(player,{_loc},{_compound})

function mining(p: player, loc: location, compound: nbt compound):
	set {_u} to uuid of {_p}
	set {_blockMine} to block at location of {_loc}
	add 1 to {miningID} if (metadata value "ID" of {_blockMine}) is not set
	set (metadata value "ID" of {_blockMine}) to {miningID} if (metadata value "ID" of {_blockMine}) is not set
	getBlockMax({_blockMine})
	set {_currenthp} to metadata value "blockID" of {_blockMine}
	add (int tag "custom;power" of nbt compound of {_p}'s tool) ? 0.5 to {_currenthp}
	set (metadata value "blockID" of {_blockMine}) to {_currenthp}
	set {_max} to int tag "custom;blockHealth" of {_compound}
	set {_stage} to round(((100*({_currenthp}/{_max})) * 0.1))
	createMiningState(metadata value "ID" of {_blockMine}, {_loc}, {_stage}, player)
	if {_stage} >= 10:
		breakBlockAnimation({_blockMine})
		delete metadata value "blockID" of {_blockMine}
		set block at location of {_blockMine} to air 
		clear all potion effects of {_p}
		delete int tag "custom;blockHealth" of {_compound}
	wait 1 tick

function getBlockMax(b:block):
	set {_block::*} to stone,cobblestone
	set {_values::*} to 20,30
	loop {_block::*}:
		if {_b} = loop-value:
			set tag "custom;blockHealth" of nbt compound of {_b} to {_values::%loop-index%}
		else:
			exit loop

function breakBlockAnimation(loc: location):
	set {_m} to (type of block at {_loc}).getMaterial()
	{_loc}.getWorld().playEffect({_loc}, Effect.STEP_SOUND, {_m}, 10)	
